{"version":3,"sources":["Components/FolderCreationWindow.js","Components/ConfirmationWindow.js","Components/Global.js","Components/Item.js","Components/DropArea.js","Components/MenuButton.js","Components/ProfileManagement.js","Components/SideMenu.js","Components/App.js","index.js"],"names":["FolderCreationWindow","props","folderName","undefined","handleFolderNameChanged","bind","event","stopPropagation","this","target","value","Fragment","className","type","placeholder","onInputCapture","onClick","onCreateClicked","onCancelClicked","React","Component","ConfirmationWindow","title","content","onConfirmClicked","host","Item","state","itemName","name","itemSize","size","itemIsFolder","isDirectory","onRemove","onDownload","onItemSelection","checkboxRef","createRef","id","current","checked","folderImg","src","alt","checkbox","ref","owner","checkboxes","push","onItemClick","createItem","item","v4","created","modified","key","compareItems","a","b","toLowerCase","DropArea","files","folderCreationWindow","selectedItems","$","on","e","preventDefault","window","addEventListener","handleWindowListeners","onDragEnter","onDragExit","onDrop","removeItem","generateItems","updateItems","itemClicked","requestDownload","itemSelectionChanged","downloadSelectedItems","onDownloadClicked","onRemoveClicked","onSelectAllClicked","onCreateFolderClicked","closeCreationWindow","closeFolderCreationWindow","createFolder","onRefreshClicked","addClass","removeClass","filesDropped","dataTransfer","droparea","counter","uploadFile","path","manageDownload","readyState","response","file","setState","length","callback","xhttp","XMLHttpRequest","fd","FormData","append","onreadystatechange","status","open","Global","send","items","allItems","prevFolder","forEach","needUpdate","i","splice","substring","document","createElement","setAttribute","click","remove","targetIndex","findIndex","arrayItem","interval","setInterval","clearInterval","removeSelectedItems","uncheckAll","newFolderItem","prevProps","array1","array2","arrayCompare","sort","foldersList","filesList","listElement","onDragLeave","onDropCapture","MenuButton","text","ProfileManagement","profiles","profileName","handleCancelClicked","handleProfileNameChanged","createProfile","JSON","parse","handleProfileChange","handleCancel","newProfile","index","confirmationWindow","currentProfile","profilesElements","profile","handleDeleteClicked","App","requestFolder","getCurrentPath","openProfileManagement","closeProfileManagement","changeProfile","dropArea","profileWindow","currentFolder","folders","split","newPath","element","replaceSlashes","temp","replace","folder","requestPath","link","responseText","getPrevFolder","getPrevFolderPath","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f80d131d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/foldercreation.css';\r\n\r\nclass FolderCreationWindow extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.folderName = undefined;\r\n\r\n        this.handleFolderNameChanged = this.handleFolderNameChanged.bind(this);\r\n    }\r\n\r\n    handleFolderNameChanged(event) {\r\n        event.stopPropagation();\r\n        this.folderName = event.target.value;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='background-fill'></div>\r\n                <div className='popup-window'>\r\n                    <div className='popup-title'>Enter Folder Name</div>\r\n                    <input className='folder-name-input' type='text' placeholder='Folder Name' onInputCapture={(event) => this.handleFolderNameChanged(event)} />\r\n                    <div>\r\n                        <button onClick={() => this.props.onCreateClicked(this.folderName)}>Create</button>\r\n                        <button onClick={this.props.onCancelClicked}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>);\r\n    }\r\n}\r\n\r\nexport default FolderCreationWindow;","import React from 'react';\r\nimport '../Styles/profilemanagement.css';\r\n\r\n/**\r\n * A window that appears at the center of the screen the is used\r\n * to ask the user for confirmation about an action about to be performed.\r\n * props:\r\n *  - title: the title of the window.\r\n *  - content: JSX content that will be presented at the center of the popup window.\r\n *  - onConfirmClicked: callback to a function for when the confirm button is clicked.\r\n *  - onCancelClicked: callback to a function for when the cancel button is clicked.\r\n */\r\nclass ConfirmationWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='background-fill' />\r\n                <div className='popup-window'>\r\n                    <div className='popup-title'>{this.props.title}</div>\r\n                    <div className='popup-content'>{this.props.content}</div>\r\n                    <div>\r\n                        <button onClick={this.props.onConfirmClicked}>Confirm</button>\r\n                        <button onClick={this.props.onCancelClicked}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmationWindow;","const host = '10.0.0.149';\r\nconst port = '80'\r\n\r\nexport { host, port };","import React from 'react';\r\n\r\nimport '../Styles/Item.css';\r\n\r\n/* Item from the server comes as the following object:\r\n * - name: name of the file, includes extesion.\r\n * - isDirectory: if the file received is of folder type.\r\n * - size: size in bytes of the file. Folder size is always zero.\r\n * - created: when the file was created.\r\n * - modified: when the file was last modified.\r\n * - owner: the owner object of the this item.\r\n */\r\n\r\nclass Item extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            itemName: this.props.name,\r\n            itemSize: this.props.size,\r\n            itemIsFolder: this.props.isDirectory,\r\n        }\r\n\r\n        this.onRemove = this.onRemove.bind(this);\r\n        this.onDownload = this.onDownload.bind(this);\r\n        this.onItemSelection = this.onItemSelection.bind(this);\r\n        this.checkboxRef = React.createRef(); //todo: remove? i don't think it is being used at all.\r\n    }\r\n\r\n    onRemove(event) {\r\n        event.stopPropagation();\r\n        this.props.onRemove(this.props.id);\r\n    }\r\n\r\n    onDownload(event) {\r\n        event.stopPropagation();\r\n        this.props.onDownload(this.state.itemName);\r\n    }\r\n\r\n    onItemSelection(event) {\r\n        event.stopPropagation(); //Stop the propagation to the item div.\r\n        this.props.onItemSelection(this, !this.checkboxRef.current.checked);\r\n    }\r\n\r\n    render() {\r\n        const folderImg = this.state.itemIsFolder ? <img src='folder-icon.bmp' alt='Folder'></img> : null;\r\n        const checkbox = this.state.itemName !== '..' ? <input ref={this.checkboxRef} className='item-checkbox' type='checkbox' onClick={(event) => this.onItemSelection(event)} /> : null;\r\n        this.props.owner.checkboxes.push(this.checkboxRef);\r\n        return (\r\n            <div className=\"item\" onClick={() => this.props.onItemClick(this.state)}>\r\n                <div className=\"item-part\">\r\n                    {checkbox}\r\n                </div>\r\n                <div className=\"item-part\">\r\n                    <div className=\"item-combo\">\r\n                        {folderImg}\r\n                        <span className=\"item-name\">{this.state.itemName}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-part\">\r\n                    <span className=\"item-size\">{this.state.itemSize}</span>\r\n                </div>\r\n\r\n                {/* <button className=\"item-button item-remove\" onClick={this.onRemove}>Remove</button> */}\r\n                {/* <button className=\"item-button item-download\" onClick={this.onDownload}>Download</button> */}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport FolderCreationWindow from './FolderCreationWindow';\r\nimport ConfirmationWindow from './ConfirmationWindow';\r\nimport * as Global from './Global';\r\nimport $ from 'jquery';\r\nimport Item from './Item';\r\nimport { v4 } from 'uuid';\r\nimport '../Styles/droparea.css';\r\n\r\n/**\r\n * Creates an Item Component.\r\n * @param {object} item Item information in a object format. Should include name (string), size (in bytes), isDirectory (boolean), created (Date), and modified (Date).\r\n * @param {Function} onRemove Callback function called when the Remove button is clicked.\r\n * @param {Function} onItemClick Callback function called when the Item div is clicked. \r\n */\r\nfunction createItem(item, onRemove, onItemClick, onDownload, onItemSelection, owner) {\r\n    const id = v4();\r\n    return <Item owner={owner} name={item.name} size={item.size} isDirectory={item.isDirectory}\r\n        created={item.created} modified={item.modified} onRemove={onRemove} onItemClick={onItemClick}\r\n        onDownload={onDownload} onItemSelection={onItemSelection}\r\n        key={id} id={id} />\r\n}\r\n\r\nclass DropArea extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            files: [],\r\n            onItemClick: this.props.onItemClick,\r\n            folderCreationWindow: undefined\r\n            // selectedItems: [],\r\n            // checkboxes: [],\r\n        }\r\n\r\n        this.selectedItems = [];\r\n        this.checkboxes = [];\r\n\r\n        $('body').on('ondrop', (e) => {\r\n            e.preventDefault();\r\n        })\r\n\r\n        //Add a listener for the browser window.\r\n        window.addEventListener('dragover', this.handleWindowListeners);\r\n\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragExit = this.onDragExit.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.generateItems = this.updateItems.bind(this);\r\n        this.itemClicked = this.itemClicked.bind(this);\r\n        this.requestDownload = this.requestDownload.bind(this);\r\n        this.itemSelectionChanged = this.itemSelectionChanged.bind(this);\r\n        this.downloadSelectedItems = this.downloadSelectedItems.bind(this);\r\n        this.onDownloadClicked = this.onDownloadClicked.bind(this);\r\n        this.onRemoveClicked = this.onRemoveClicked.bind(this);\r\n        this.onSelectAllClicked = this.onSelectAllClicked.bind(this);\r\n        this.onCreateFolderClicked = this.onCreateFolderClicked.bind(this);\r\n        this.closeCreationWindow = this.closeFolderCreationWindow.bind(this);\r\n        this.createFolder = this.createFolder.bind(this);\r\n        this.closeFolderCreationWindow = this.closeFolderCreationWindow.bind(this);\r\n        this.onRefreshClicked = this.onRefreshClicked.bind(this);\r\n    }\r\n\r\n    //Removes the default action of browsers when a file is dropped.\r\n    handleWindowListeners(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        $(\".drop-area\").addClass('drag-on');\r\n    }\r\n\r\n    onDragExit(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        $(\".drop-area\").removeClass('drag-on');\r\n    }\r\n\r\n    onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // event.persist\r\n        $(\".drop-area\").removeClass('drag-on');\r\n\r\n        const filesDropped = event.dataTransfer.files;\r\n        const droparea = this;\r\n        let counter = 0;\r\n        const manageDownload = function (readyState, response) {\r\n            if (readyState === 4 && response === 200) {\r\n                const file = filesDropped[counter];\r\n                // const file = event.dataTransfer.files[counter];\r\n                droparea.state.files.push(createItem(file, droparea.removeItem, droparea.itemClicked, droparea.requestDownload, droparea.itemSelectionChanged, droparea));\r\n                counter++;\r\n                //Update state\r\n                droparea.setState({\r\n                    files: droparea.state.files,\r\n                });\r\n                // console.log('RS: ' + readyState + ' RESP: ' + response + ' COUNTER: ' + counter);\r\n\r\n                if (counter !== filesDropped.length) {\r\n\r\n                    droparea.uploadFile(droparea.props.path(), filesDropped[counter], manageDownload);\r\n                    // this.uploadFile(this.props.path(), event.dataTransfer.files[counter], manageDownload);\r\n                }\r\n            }\r\n        };\r\n\r\n        //Start upload chain.\r\n        this.uploadFile(this.props.path(), filesDropped[counter], manageDownload);\r\n    }\r\n\r\n    /**\r\n     * Uploads a file to the server.\r\n     * @param {*} path - path of the file\r\n     * @param {*} file - the actual file\r\n     * @param {*} callback - when the upload completes/fails the function to be called.\r\n     */\r\n    uploadFile(path, file, callback) {\r\n        const xhttp = new XMLHttpRequest();\r\n        const fd = new FormData(); //Creates a form to be sent.\r\n        // const path = this.props.path();\r\n        //TODO: Add a response behaviour to the request.\r\n        fd.append('rpath', path);\r\n        fd.append('data', file);\r\n\r\n        xhttp.onreadystatechange = () => {\r\n            if (callback !== undefined)\r\n                callback(xhttp.readyState, xhttp.status);\r\n        }\r\n\r\n        xhttp.open('POST', `http://${Global.host}:${Global.port}/api/u/test-user/a`);\r\n        xhttp.send(fd);\r\n    }\r\n\r\n    /**\r\n     * Execute actions when an item is clicked.Plive\r\n     * @param {*} itemName \r\n     */\r\n    itemClicked(item) {\r\n        if (item.itemIsFolder) {\r\n            //Add to current folder and make a new request.\r\n            this.state.onItemClick(item.itemName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows all the items received.\r\n     * @param {*} items array of items\r\n     */\r\n    updateItems(items) {\r\n        const allItems = [];\r\n\r\n        if (this.props.prevFolder !== undefined) {\r\n            // allItems.push(<Item name={'..'} key={v4()} onRemove={undefined} onItemClick={this.itemClicked} isDirectory={true} />);\r\n            allItems.push(createItem({\r\n                name: '..',\r\n                isDirectory: true,\r\n                created: undefined,\r\n                modified: undefined\r\n            }, undefined, this.itemClicked, undefined, undefined, this));\r\n        }\r\n\r\n        items.forEach(e => {\r\n            allItems.push(createItem(e, this.removeItem, this.itemClicked, this.requestDownload, this.itemSelectionChanged, this));\r\n            // const key = v4();\r\n            // allItems.push(<Item name={e.name} size={0} key={key} id={key} onRemove={this.removeItem} onItemClick={this.itemClicked} isDirectory={e.isDirectory} />);\r\n        });\r\n\r\n        this.setState({\r\n            files: allItems,\r\n            needUpdate: false,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes a delete request with the folders path. If the request returns 200 as response the item is deleted from the list.\r\n     * \r\n     * @param {*} id target id.\r\n     */\r\n    async removeItem(id) {\r\n        const items = this.state.files;\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].props.id === id) {\r\n                //Get item name\r\n                let name = items[i].props.name;\r\n                //Send delete request\r\n                const xhttp = new XMLHttpRequest();\r\n\r\n                //TODO: Change item status to deleting\r\n                //On 200 Response\r\n                xhttp.onreadystatechange = () => {\r\n                    if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                        //Remove item from list\r\n                        items.splice(i, 1);\r\n                        //Update state\r\n                        this.setState({\r\n                            files: items,\r\n                        })\r\n                    }\r\n                };\r\n\r\n                const path = this.props.path();\r\n                // console.log('PATH: ' + path);\r\n                xhttp.open('DELETE', `http://${Global.host}:${Global.port}/api/` + path + (path.substring(path.length - 3, path.length) === '%2F' ? '' : '%2F') + name);\r\n                xhttp.send();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Downloads a single item based on the name.\r\n     * @param {string} name name of the item to be downloaded.\r\n     */\r\n\r\n    requestDownload(name) {\r\n        // console.log('Requesting ' + name + ' for download.');\r\n\r\n        const path = this.props.path();\r\n\r\n        // //Creates a temporary element and removes it after.\r\n        let a = document.createElement('a');\r\n        a.setAttribute('target', null);\r\n        a.setAttribute('href', `http://${Global.host}:${Global.port}/api/d/${path}${path.substring(path.length - 3, path.length) === '2%F' ? '' : '%2F'}${name}`);\r\n\r\n        a.click();\r\n        a = null;\r\n    }\r\n\r\n    /**\r\n     * Updates the selectedItems array depeding on the checkbox changes on the items.\r\n     * @param {object} item adds this item to the array if checkbox is checked\r\n     * @param {boolean} remove if true will look for the item passed in to be removed from the array.\r\n     */\r\n    itemSelectionChanged(item, remove) {\r\n        // console.log('ITEM SELECTED: ' + item + ' -- ' + remove);\r\n        if (remove) {\r\n            //Find the item by name. TODO: Might be better to use ID instead.\r\n            const targetIndex = this.selectedItems.findIndex((arrayItem) => arrayItem.state.itemName === item.state.itemName);\r\n            this.selectedItems.splice(targetIndex, 1);\r\n        } else {\r\n            //Add item to selectedItems\r\n            this.selectedItems.push(item);\r\n        }\r\n        // console.log('ITEMS SELECTED: ' + this.selectedItems);\r\n\r\n    }\r\n\r\n    downloadSelectedItems() {\r\n        if (this.selectedItems.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let counter = 0;\r\n\r\n        //Creates an interval to be called at a set amount of ms that calls the next item in the list to be deleted.\r\n        const interval = setInterval(() => {\r\n            // console.log('Interval started');\r\n            this.requestDownload(this.selectedItems[counter].state.itemName);\r\n            counter++;\r\n            //Checks if the counter reached the end of the array.\r\n            if (counter === this.selectedItems.length) {\r\n                clearInterval(interval);\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    removeSelectedItems() {\r\n        if (this.selectedItems.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let counter = 0;\r\n        //Creates an interval to be called at a set amount of ms that calls the next item in the list to be deleted.\r\n        const interval = setInterval(() => {\r\n            //Makes a remove request for the item.\r\n            this.removeItem(this.selectedItems[counter].props.id);\r\n            counter++;\r\n            //Checks if the counter reached the end of the array.\r\n            if (counter === this.selectedItems.length) {\r\n                clearInterval(interval);\r\n                //Clear the selected items array.\r\n                this.selectedItems.length = 0;\r\n            }\r\n        }, 150);\r\n    }\r\n\r\n    onDownloadClicked() {\r\n        this.downloadSelectedItems();\r\n    }\r\n\r\n    onRemoveClicked() {\r\n        //Shows a confirmation window.\r\n        this.setState({\r\n            folderCreationWindow: <ConfirmationWindow\r\n                title='Item Deletion'\r\n                content='Are you sure you want to delete the item(s) selected? Once they are gone, they are gone.'\r\n                //If the the user clicks cancel removes the popup.\r\n                onCancelClicked={() => {\r\n                    this.setState({\r\n                        folderCreationWindow: undefined,\r\n                    });\r\n                }}\r\n\r\n                //If the user confirms the popup is removed and the requests are made.\r\n                onConfirmClicked={() => {\r\n                    this.setState({\r\n                        folderCreationWindow: undefined,\r\n                    });\r\n                    this.removeSelectedItems();\r\n                }}\r\n            />\r\n        });\r\n        // this.removeSelectedItems();\r\n    }\r\n\r\n    /**\r\n     * Called when the 'Select All' button is clicked. It checks for any checkboxes that are checked, if any are found it unmarks them an finishes the execution.\r\n     * If none are found it checks all the checkboxes.\r\n     */\r\n    onSelectAllClicked() {\r\n        let uncheckAll = false;\r\n        for (let i = 0; i < this.checkboxes.length; i++) {\r\n            if (this.checkboxes[i].current !== null && this.checkboxes[i].current.checked) {\r\n                uncheckAll = true;\r\n                break;\r\n            }\r\n        }\r\n        if (uncheckAll) {\r\n            for (let i = 0; i < this.checkboxes.length; i++) {\r\n                if (this.checkboxes[i].current && this.checkboxes[i].current.checked === true) {\r\n                    this.checkboxes[i].current.click();\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < this.checkboxes.length; i++) {\r\n                if (this.checkboxes[i].current !== null)\r\n                    this.checkboxes[i].current.click();\r\n            }\r\n        }\r\n\r\n        // console.log(this.state.checkboxes);\r\n    }\r\n\r\n    onCreateFolderClicked() {\r\n        this.setState({\r\n            folderCreationWindow: <FolderCreationWindow onCreateClicked={this.createFolder} onCancelClicked={this.closeFolderCreationWindow} />\r\n        });\r\n    }\r\n\r\n    onRefreshClicked() {\r\n        this.props.onRefreshClicked('.');\r\n    }\r\n\r\n    createFolder(name) {\r\n        // console.log(name);\r\n        this.closeFolderCreationWindow();\r\n        if (name === undefined || name === '') {\r\n            return;\r\n        }\r\n\r\n        const newFolderItem = createItem({ name: name, size: 0, isDirectory: true, created: undefined, modified: undefined },\r\n            undefined,\r\n            this.itemClicked,\r\n            this.requestDownload,\r\n            this.itemSelectionChanged,\r\n            this);\r\n\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                this.state.files.push(newFolderItem);\r\n                //Add item to list\r\n                this.setState({\r\n                    files: this.state.files,\r\n                })\r\n            }\r\n        }\r\n        const path = this.props.path();\r\n        xhttp.open('POST', `http://${Global.host}:${Global.port}/api/cf/${path}${path.substring(path.length - 3, path.length) === '2%F' ? '' : '%2F'}${name}`);\r\n        xhttp.send();\r\n\r\n    }\r\n\r\n    closeFolderCreationWindow() {\r\n        this.setState({\r\n            folderCreationWindow: undefined\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.items === undefined) {\r\n            return;\r\n        }\r\n        if (prevProps.items == null) {\r\n            this.updateItems(this.props.items);\r\n        } else {\r\n            if (!arrayCompare(prevProps.items, this.props.items)) {\r\n                this.updateItems(this.props.items);\r\n            } else {\r\n                // console.log('same');\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // Sort items by alphabetical order.\r\n        this.state.files.sort(compareItems);\r\n        const foldersList = [];\r\n        const filesList = [];\r\n        // Separates each file into specific arrays depending if they are directories or not.\r\n        this.state.files.forEach(e => {\r\n            if (e.props.isDirectory) {\r\n                foldersList.push(e);\r\n            } else {\r\n                filesList.push(e);\r\n            }\r\n        });\r\n\r\n        // Create a list element that will contain all items. Folders are shown first. \r\n        let listElement = 'No files here :(. Drag and drop some files here to start.';\r\n        if (this.state.files.length !== 0) {\r\n            listElement = (<React.Fragment>{foldersList}{filesList}</React.Fragment>);\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.folderCreationWindow}\r\n                <div className=\"button-collection\">\r\n                    <button onClick={this.onRefreshClicked}>Refresh</button>\r\n                    <button onClick={this.onSelectAllClicked}>Select All</button>\r\n                    <button onClick={this.onCreateFolderClicked}>Create Folder</button>\r\n                    <button onClick={this.onDownloadClicked}>Download</button>\r\n                    <button onClick={this.onRemoveClicked}>Remove</button>\r\n                </div>\r\n                <div className=\"drop-area\" onDragEnter={this.onDragEnter} onDragLeave={this.onDragExit} onDropCapture={this.onDrop} onDrop={this.onDrop}>\r\n                    <div>\r\n                        {listElement}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Compares two arrays for equality.\r\n * @param {*} array1 \r\n * @param {*} array2 \r\n */\r\nfunction arrayCompare(array1, array2) {\r\n    if (array1 === undefined || array2 === undefined) {\r\n        return false;\r\n    }\r\n\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] !== array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction compareItems(a, b) {\r\n    if (a.props.name < b.props.name) {\r\n        return -1;\r\n    } else if (a.props.name.toLowerCase() > b.props.name.toLowerCase()) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport default DropArea;","import React from 'react';\r\n\r\nclass MenuButton extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.onClick}>{this.props.text}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MenuButton;","import React from 'react';\r\nimport ConfirmationWindow from './ConfirmationWindow';\r\nimport * as Global from './Global';\r\nimport '../Styles/profilemanagement.css'\r\n\r\nclass ProfileManagement extends React.Component {\r\n    //PROPS: handleCancel, handleProfileChange, currentProfile\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            profiles: [],\r\n        }\r\n\r\n        this.profileName = undefined;\r\n\r\n        this.handleCancelClicked = this.handleCancelClicked.bind(this);\r\n        this.handleProfileNameChanged = this.handleProfileNameChanged.bind(this);\r\n        this.createProfile = this.createProfile.bind(this);\r\n\r\n        //Get all profiles\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                this.setState({\r\n                    profiles: JSON.parse(xhttp.response)\r\n                });\r\n            }\r\n        }\r\n\r\n        xhttp.open('GET', `http://${Global.host}:${Global.port}/api/i/profile`);\r\n        xhttp.send();\r\n    }\r\n\r\n    createProfile() {\r\n        if (this.profileName === undefined || this.profileName === '') {\r\n            //TODO: Show error message on screen.\r\n            return;\r\n        }\r\n\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                this.handleProfileChange(undefined, this.profileName);\r\n            }\r\n        };\r\n\r\n        //TODO: Change spaces for dashes in the profileName.\r\n\r\n        xhttp.open('POST', `http://${Global.host}:${Global.port}/api/cp/${this.profileName}`);\r\n        xhttp.send();\r\n    }\r\n\r\n    handleProfileNameChanged(event) {\r\n        event.stopPropagation();\r\n        //Assigns whatever the user type to profileName.\r\n        this.profileName = event.target.value;\r\n    }\r\n\r\n    handleCancelClicked(event) {\r\n        event.stopPropagation();\r\n        this.props.handleCancel();\r\n    }\r\n\r\n    handleProfileChange(event, newProfile) {\r\n        if (event !== undefined) {\r\n            event.stopPropagation();\r\n        }\r\n        this.props.handleProfileChange(newProfile);\r\n    }\r\n\r\n    handleDeleteClicked(event, index) {\r\n        //TODO: Show confirmation popup.\r\n        event.stopPropagation();\r\n        this.setState({\r\n            confirmationWindow: <ConfirmationWindow title='Profile Deletion'\r\n                content='Are you sure you want to delete this profile? It will delete all the files from this profile. There is no way to get them back after.'\r\n                onConfirmClicked={() => {\r\n                    this.setState({\r\n                        confirmationWindow: undefined\r\n                    });\r\n                    const xhttp = new XMLHttpRequest();\r\n                    xhttp.onreadystatechange = () => {\r\n                        if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                            // Remove profile from the profiles.\r\n                            if (this.props.currentProfile === this.state.profiles[index]) {\r\n                                this.state.profiles.splice(index, 1);\r\n                                this.handleProfileChange(undefined, this.state.profiles[0]);\r\n                            } else {\r\n                                this.state.profiles.splice(index, 1);\r\n                                this.setState({\r\n                                    profiles: this.state.profiles,\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    xhttp.open('DELETE', `http://${Global.host}:${Global.port}/api/dp/${this.state.profiles[index]}`);\r\n                    xhttp.send();\r\n                }} //onConfirmClicked END\r\n                onCancelClicked={() => {\r\n                    this.setState({\r\n                        confirmationWindow: undefined\r\n                    })\r\n                }} /> //onCancelClicked END\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const profilesElements = [];\r\n        //Creates profiles elements for each profile.\r\n        this.state.profiles.forEach((profile, index) => {\r\n            profilesElements.push(\r\n                <div onClick={(event) => this.handleProfileChange(event, profile)} className='profile-single' key={index}>\r\n                    <div className='profile-name'>{profile}</div>\r\n                    <button onClick={(event) => this.handleDeleteClicked(event, index)}>Delete</button>\r\n                </div>);\r\n        });\r\n        //If the confirmation window exists it should show it instead of the profile window.\r\n        if (this.state.confirmationWindow !== undefined) {\r\n            return (\r\n                <React.Fragment>\r\n                    {this.state.confirmationWindow}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.confirmationWindow}\r\n                <div className='background-fill' />\r\n                <div className='profile-window'>\r\n                    <div className='profile-block-container'>\r\n                        <div className='profile-window-block divider-line-right divider-line-bottom'>\r\n                            <div className='profile-window-block-title divider-line-bottom'>\r\n                                Select Profile\r\n                            </div>\r\n                            {profilesElements}\r\n                        </div>\r\n                        <div className='profile-window-block divider-line-bottom'>\r\n                            <div className='profile-window-block-title divider-line-bottom'>\r\n                                <div>Create Profile</div>\r\n                            </div>\r\n                            <div className='profile-creation'>\r\n                                <input className='profile-name-input' type='text' placeholder='Profile Name' onInputCapture={this.handleProfileNameChanged} />\r\n                                <button className='profile-create-button' onClick={this.createProfile}>Create Profile</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='profile-footer'>\r\n                        <button onClick={this.handleCancelClicked}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileManagement;","import React from 'react';\r\nimport MenuButton from './MenuButton';\r\n\r\nclass SideMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleRefreshOnClick = this.handleRefreshOnClick.bind(this);\r\n    }\r\n\r\n\r\n    handleRefreshOnClick() {\r\n        this.props.refreshClicked();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='side-menu'>\r\n                <MenuButton text='Refresh' onClick={this.handleRefreshOnClick} />\r\n                {/* <Tree /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport DropArea from './DropArea';\nimport SideMenu from './SideMenu';\nimport ProfileManagement from './ProfileManagement';\nimport * as Global from './Global';\n\nimport '../Styles/App.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    // this.dropAreaRef = React.createRef();\n    this.requestFolder = this.requestFolder.bind(this);\n    this.getCurrentPath = this.getCurrentPath.bind(this);\n    this.openProfileManagement = this.openProfileManagement.bind(this);\n    this.closeProfileManagement = this.closeProfileManagement.bind(this);\n    this.changeProfile = this.changeProfile.bind(this);\n\n    this.state = {\n      dropArea: <DropArea onItemClick={this.requestFolder} path={this.getCurrentPath} onRefreshClicked={this.requestFolder} />,\n      profileWindow: undefined,\n      profile: '(No profile selected)',\n      currentFolder: '%2F',\n    }\n  }\n\n  /**\n   * Returns the previous folder name based on a complete path.\n   * @param {*} path full path of the current folder.\n   */\n  getPrevFolder(path) {\n    //If at root folder return nothing.\n    if (path === '%2F' || path === undefined) {\n      return undefined;\n    }\n\n    const folders = path.split('%2F');\n    // console.log(folders[folders.length - 2]);\n    return folders[folders.length - 2] === '' ? '%2F' : folders[folders.length - 2];\n  }\n\n  getPrevFolderPath(path) {\n    //If at root folder return nothing.\n    if (path === '%2F' || path === undefined) {\n      return undefined;\n    }\n\n    //Creates an array with each folder as a single element.\n    let folders = path.split('%2F');\n    //Removes last element.\n    folders.splice(folders.length - 1, 1);\n    let newPath = '';\n    //Create a new path with the remaining folders.\n    folders.forEach(element => {\n      newPath += element + '%2F';\n    });\n    // console.log('NEWPATH: ' + newPath.substring(0, newPath.length - 3));\n    return newPath === '' ? undefined : newPath.substring(0, newPath.length - 3); //Removes last %2F from the string.\n  }\n\n  /**\n   * Returns the current path including the profile.\n   */\n  getCurrentPath(replaceSlashes) {\n    let temp = `${this.state.profile}${this.state.currentFolder}`\n    // console.log('OLDTEMP: ' + temp);\n    if (replaceSlashes)\n      temp = temp.replace(/(%2F)/g, '/');\n    // console.log('TEMP: ' + temp);\n    return temp;\n  }\n\n  /**\n   * Requests folder information from the server. Updates the current path if the request is fufilled.\n   * @param {string} folder \n   */\n  requestFolder(folder) {\n    const xhttp = new XMLHttpRequest();\n    let response;\n    let requestPath;\n\n    xhttp.onreadystatechange = () => {\n      if (xhttp.readyState === 4 && xhttp.status === 200) {\n        response = JSON.parse(xhttp.responseText);\n\n        this.setState({\n          currentFolder: requestPath,\n          dropArea: <DropArea items={response} prevFolder={this.getPrevFolder(requestPath)} path={this.getCurrentPath} onRefreshClicked={this.requestFolder} />\n        });\n\n      }\n    }\n\n    let link;\n    //If the folder requested is . it requests the same folder information.\n    if (folder === '.') {\n      // console.log('Refreshed');\n      requestPath = this.state.currentFolder;\n    }\n    //If the folder requested is .. it requests the previous folder information.\n    else if (folder === '..') {\n      // console.log('CURRENT FOLDER: ' + this.state.currentFolder);\n      requestPath = this.getPrevFolderPath(this.state.currentFolder);\n    } else {\n      // console.log('CURRENT FOLDER: ' + this.state.currentFolder);\n      requestPath = this.state.currentFolder + (this.state.currentFolder === '%2F' ? '' : '%2F') + (folder === '%2F' ? '' : folder);\n      // console.log('REQUEST PATH: ' + requestPath);\n    }\n    link = `http://${Global.host}:${Global.port}/api/${this.state.profile}${requestPath}`;\n\n    // console.log('LINK ' + link);\n    xhttp.open('GET', link, true);\n    xhttp.send();\n  }\n\n  openProfileManagement() {\n    this.setState({\n      profileWindow: <ProfileManagement currentProfile={this.state.profile} handleCancel={this.closeProfileManagement} handleProfileChange={(newProfile) => this.changeProfile(newProfile)} />\n    });\n  }\n\n  closeProfileManagement() {\n    this.setState({\n      profileWindow: undefined,\n    });\n  }\n\n  changeProfile(newProfile) {\n    this.setState({\n      profile: newProfile,\n      currentFolder: '%2F'\n    }, () => {\n      this.closeProfileManagement();\n      this.requestFolder('%2F');\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.profileWindow}\n        <div className=\"app\">\n          <div>\n            <h1>Home Cloud Drive v1</h1>\n            <h2>Profile: {this.state.profile} <button onClick={this.openProfileManagement}>Change</button></h2>\n            <div>\n              {/* <span className=\"\">Current Path: {this.getCurrentPath(true)}</span> */}\n              <div className=\"path-container\"><div className=\"path-title\">Current Path</div><div className=\"path-actual\">/{this.getCurrentPath(true)}</div></div>\n            </div>\n          </div>\n          {/* <SideMenu refreshClicked={() => this.requestFolder('.')} /> */}\n          {this.state.dropArea}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\n\r\n\r\n\r\nconst root = document.getElementById(\"root\");\r\nReactDOM.render(<App />, root)\r\n"],"sourceRoot":""}